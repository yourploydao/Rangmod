// src/lib/ai/fineTuneGen.ts
import fs from 'fs'
import path from 'path'
import { getCombinedDormData } from './mongo'

function getRandom<T>(arr: T[], count: number): T[] {
  const shuffled = [...arr].sort(() => 0.5 - Math.random())
  return shuffled.slice(0, count)
}

export async function exportToJsonl() {
  try {
    console.log('üì¶ ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡∏≠‡∏û‡∏±‡∏Å...')
    const dorms = await getCombinedDormData()
    console.log(`‚úÖ ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à ${dorms.length} ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£`)

    const lines: string[] = []

    // ‚úÖ Map: ‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å ‚Üí ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏≠
    const facToDorms: Record<string, string[]> = {}
    dorms.forEach(dorm => {
      dorm.facilities.forEach((fac: string) => {
        if (!facToDorms[fac]) facToDorms[fac] = []
        facToDorms[fac].push(dorm.name)
      })
    })

    // ‚úÖ ‡∏Ñ‡∏≥‡∏ñ‡∏≤‡∏°‡∏£‡∏ß‡∏°: "‡∏°‡∏µ‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ .... ‡∏ö‡πâ‡∏≤‡∏á"
    Object.entries(facToDorms).forEach(([fac, dormList]) => {
      if (dormList.length > 1) {
        const selected = getRandom(dormList, Math.min(5, dormList.length))
        lines.push(JSON.stringify({
          messages: [
            { role: 'user', content: `‡∏°‡∏µ‡∏´‡∏≠‡∏û‡∏±‡∏Å‡πÑ‡∏´‡∏ô‡∏ó‡∏µ‡πà‡∏°‡∏µ ${fac} ‡∏ö‡πâ‡∏≤‡∏á` },
            { role: 'assistant', content: `‡∏´‡∏≠‡∏û‡∏±‡∏Å‡∏ó‡∏µ‡πà‡∏°‡∏µ ${fac} (‡πÑ‡∏°‡πà‡πÄ‡∏Å‡∏¥‡∏ô 5 ‡∏£‡∏≤‡∏¢‡∏ä‡∏∑‡πà‡∏≠) ‡πÄ‡∏ä‡πà‡∏ô: ${selected.join(', ')} ‡πÄ‡∏õ‡πá‡∏ô‡∏ï‡πâ‡∏ô.` }
          ]
        }))
      }
    })

    for (const dorm of dorms) {
      const {
        name,
        type_dormitory,
        category_dormitory,
        full_location,
        rooms,
        facilities,
        room_type,
        price_range,
        description,
        electric_price,
        water_price,
        other,
        distance_from_university,
        agreement,
        contract_duration,
        num_of_rooms,
        phone_number
      } = dorm as any

      const roomsDetail = rooms.map((r: string) => r).join(', ') || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å'
      const facList = facilities || []
      const facText = facList.join(', ') || '‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å'
      const facPreview = getRandom(facList, Math.min(3, facList.length)).join(', ') || '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'

      const qaPairs = [
        { q: `‡∏´‡∏≠‡∏û‡∏±‡∏Å ${name} ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏ñ‡∏ß‡πÑ‡∏´‡∏ô`, a: `${name} ‡∏ï‡∏±‡πâ‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà ${full_location}` },
        { q: `‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏Ç‡∏≠‡∏á ${name} ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á`, a: `${name} ‡∏°‡∏µ: ${facText}` },
        { q: `‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏Ç‡∏≠‡∏á ${name} ‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏´‡∏£‡πà`, a: `${name} ‡∏°‡∏µ‡∏£‡∏≤‡∏Ñ‡∏≤‡∏´‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡πÉ‡∏ô‡∏ä‡πà‡∏ß‡∏á ${price_range} ‡∏ö‡∏≤‡∏ó` },
        { q: `‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡∏Ç‡∏≠‡∏á ${name} ‡∏°‡∏µ‡∏≠‡∏∞‡πÑ‡∏£‡∏ö‡πâ‡∏≤‡∏á`, a: `${name} ‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÅ‡∏ö‡∏ö: ${roomsDetail}` },
        { q: `‡∏´‡∏≠‡∏û‡∏±‡∏Å ${name} ‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏Å‡∏•‡∏à‡∏≤‡∏Å‡∏°‡∏´‡∏≤‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏•‡∏±‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô`, a: `${name} ‡∏≠‡∏¢‡∏π‡πà‡∏´‡πà‡∏≤‡∏á ${distance_from_university} ‡∏Å‡∏°.` },
        { q: `‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ô‡∏≤‡∏ô‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£‡∏Å‡∏±‡∏ö ${name}`, a: `${name} ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ ${contract_duration} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (${agreement})` },
        { q: `‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥ ‡∏ó‡∏µ‡πà ${name} ‡πÄ‡∏õ‡πá‡∏ô‡∏¢‡∏±‡∏á‡πÑ‡∏á`, a: `‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü ${electric_price} ‡∏ö‡∏≤‡∏ó/‡∏´‡∏ô‡πà‡∏ß‡∏¢, ‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥ ${water_price} ‡∏ö‡∏≤‡∏ó` },
        { q: `‡∏ó‡∏µ‡πà ${name} ‡∏°‡∏µ‡∏ö‡∏£‡∏¥‡∏Å‡∏≤‡∏£‡∏≠‡∏∑‡πà‡∏ô‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡πÑ‡∏´‡∏°`, a: `‡∏°‡∏µ‡∏Ñ‡πà‡∏≤‡πÉ‡∏ä‡πâ‡∏à‡πà‡∏≤‡∏¢‡πÄ‡∏û‡∏¥‡πà‡∏°‡πÄ‡∏ï‡∏¥‡∏°‡∏õ‡∏£‡∏∞‡∏°‡∏≤‡∏ì ${other ?? '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'} ‡∏ö‡∏≤‡∏ó/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô` },
        { q: `‡∏≠‡∏¢‡∏≤‡∏Å‡∏à‡∏≠‡∏á ${name} ‡∏ï‡πâ‡∏≠‡∏á‡∏ï‡∏¥‡∏î‡∏ï‡πà‡∏≠‡πÉ‡∏Ñ‡∏£`, a: `‡πÇ‡∏ó‡∏£‡∏à‡∏≠‡∏á‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà ${phone_number}` },
        { q: `‡∏´‡∏≠‡∏û‡∏±‡∏Å ${name} ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡πÉ‡∏Ñ‡∏£`, a: `${name} ‡πÄ‡∏´‡∏°‡∏≤‡∏∞‡∏Å‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡∏™‡∏ö‡∏≤‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ${facPreview}` },
        { q: `‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å‡πÅ‡∏ö‡∏ö ${room_type} ‡∏Ç‡∏≠‡∏á ${name} ‡∏£‡∏≤‡∏Ñ‡∏≤‡πÄ‡∏ó‡πà‡∏≤‡πÑ‡∏£`, a: `${rooms}` },
        { q: `‡∏´‡∏≠‡∏û‡∏±‡∏Å ${name} ‡∏°‡∏µ‡∏à‡∏∏‡∏î‡πÄ‡∏î‡πà‡∏ô‡∏≠‡∏∞‡πÑ‡∏£`, a: `${name} ‡∏°‡∏µ‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å‡πÄ‡∏ä‡πà‡∏ô ${facText}` },
        { q: `‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏¢‡∏π‡πà‡∏ó‡∏µ‡πà ${name} ‡πÑ‡∏î‡πâ‡∏™‡∏±‡πâ‡∏ô‡∏™‡∏∏‡∏î‡∏Å‡∏µ‡πà‡πÄ‡∏î‡∏∑‡∏≠‡∏ô`, a: `${name} ‡∏ï‡πâ‡∏≠‡∏á‡∏≠‡∏¢‡∏π‡πà‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡πà‡∏≥ ${contract_duration} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô` },
        { q: `‡∏´‡∏≠‡∏û‡∏±‡∏Å ${name} ‡∏°‡∏µ‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏Å‡∏µ‡πà‡∏´‡πâ‡∏≠‡∏á`, a: `${name} ‡∏°‡∏µ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î ${num_of_rooms ?? rooms.length} ‡∏´‡πâ‡∏≠‡∏á` },
        { q: `‡∏ó‡∏µ‡πà ${name} ‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢‡πÅ‡∏Ñ‡πà‡πÑ‡∏´‡∏ô`, a: `${name} ‡∏°‡∏µ‡∏£‡∏∞‡∏ö‡∏ö‡∏£‡∏±‡∏Å‡∏©‡∏≤‡∏Ñ‡∏ß‡∏≤‡∏°‡∏õ‡∏•‡∏≠‡∏î‡∏†‡∏±‡∏¢ ‡πÄ‡∏ä‡πà‡∏ô ${facText.includes('cctv') ? 'CCTV' : '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏'}` },
        { q: `‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ó‡∏≥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏£‡∏∞‡∏¢‡∏∞‡∏™‡∏±‡πâ‡∏ô‡∏Å‡∏±‡∏ö ${name} ‡πÑ‡∏î‡πâ‡πÑ‡∏´‡∏°`, a: `${name} ‡∏ï‡πâ‡∏≠‡∏á‡∏ó‡∏≥‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ ${contract_duration} ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô` },
        { q: `‡∏´‡∏≠‡∏û‡∏±‡∏Å ${name} ‡∏£‡∏±‡∏ö‡∏ú‡∏π‡πâ‡∏û‡∏±‡∏Å‡∏Å‡∏•‡∏∏‡πà‡∏°‡πÑ‡∏´‡∏ô`, a: `${name} ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${category_dormitory}` },
        { q: `‡∏´‡∏≠‡∏û‡∏±‡∏Å ${name} ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏≠‡∏ä‡∏≤‡∏¢‡∏´‡∏£‡∏∑‡∏≠‡∏´‡∏≠‡∏´‡∏ç‡∏¥‡∏á`, a: `${name} ‡πÄ‡∏õ‡πá‡∏ô‡∏´‡∏≠‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö ${category_dormitory}` },
        { q: `‡∏´‡∏≠‡∏û‡∏±‡∏Å ${name} ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó‡∏≠‡∏∞‡πÑ‡∏£`, a: `${name} ‡πÄ‡∏õ‡πá‡∏ô‡∏ó‡∏µ‡πà‡∏û‡∏±‡∏Å‡∏õ‡∏£‡∏∞‡πÄ‡∏†‡∏ó ${type_dormitory}` }
      ]

      const selected = getRandom(qaPairs, Math.floor(Math.random() * 4) + 10)
      selected.forEach(({ q, a }) => {
        lines.push(JSON.stringify({
          messages: [
            { role: 'user', content: q },
            { role: 'assistant', content: a }
          ]
        }))
      })
    }

    const filePath = path.join(process.cwd(), 'fine-tune-dataset.jsonl')
    fs.writeFileSync(filePath, lines.join('\n'), 'utf8')
    console.log(`‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà: ${filePath}`)
    console.log(`üìä ‡∏ï‡∏±‡∏ß‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏£‡∏ß‡∏°: ${lines.length}`)
  } catch (err) {
    console.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î:', err)
  }
}

exportToJsonl()
